var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = PixelFlipper","category":"page"},{"location":"#PixelFlipper","page":"Home","title":"PixelFlipper","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for PixelFlipper.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [PixelFlipper]","category":"page"},{"location":"#PixelFlipper.AbstractImputer","page":"Home","title":"PixelFlipper.AbstractImputer","text":"AbstractImputer\n\nAbstract supertype of all imputers. Given an input and indices from a selector, this imputes values of an array at the given index.\n\n\n\n\n\n","category":"type"},{"location":"#PixelFlipper.AbstractSelector","page":"Home","title":"PixelFlipper.AbstractSelector","text":"AbstractSelector\n\nAbstract supertype of all selectors. Given an Explanation or WHCN array, all AbstractSelector return an iterator of values to be imputed.\n\n\n\n\n\n","category":"type"},{"location":"#PixelFlipper.ConstantImputer","page":"Home","title":"PixelFlipper.ConstantImputer","text":"ConstantImputer(value)\n\nImputes a constant value into a given array. Defaults to 0.0f0. \n\n\n\n\n\n","category":"type"},{"location":"#PixelFlipper.PixelFlipping","page":"Home","title":"PixelFlipper.PixelFlipping","text":"PixelFlipping([; selector, imputer, steps])\n\nComputes pixel flipping curves.\n\nKeyword arguments\n\nselector::AbstractSelector: Specify input selector. Defaults to PixelSelector(:norm).\nimputer::AbstractImputer: Specify input imputer. Defaults to ConstantImputer{Float32}(0.0f0) of value zero.\nsteps::Int: Specify number of imputation steps. Has to be smaller than the amount of selectable inputs in a sample. Defaults to 25.\n\n\n\n\n\n","category":"type"},{"location":"#PixelFlipper.PixelSelector","page":"Home","title":"PixelFlipper.PixelSelector","text":"PixelSelector()\nPixelSelector(; reduce=:norm)\n\nReduces color channels in an Explanation according to reduce and returns an iterator over the indices of sorted values.\n\nKeyword arguments\n\nreduce::Symbol: Selects how color channels are reduced to a single number to apply a color scheme. The following methods can be selected, which are then applied over the color channels for each \"pixel\" in the array:\n:sum: sum up color channels\n:norm: compute 2-norm over the color channels\n:maxabs: compute maximum(abs, x) over the color channels\n:sumabs: compute sum(abs, x) over the color channels\n:abssum: compute abs(sum(x)) over the color channels\nDefaults to :norm.\n\n\n\n\n\n","category":"type"},{"location":"#PixelFlipper.evaluate-Union{Tuple{T}, Tuple{PixelFlipping, Any, AbstractArray{T, 4}, AbstractArray{T, 4} where T}} where T","page":"Home","title":"PixelFlipper.evaluate","text":"evaluate(pixelflipping, model, input, explanation::Explanation)\nevaluate(pixelflipping, model, input, values::AbstractArray) \nevaluate(pixelflipping, model, input, analyzer::AbstractXAIMethod)\n\nRun the PixelFlipping method on the given model, input and explanation.\n\n\n\n\n\n","category":"method"},{"location":"#PixelFlipper.select-Tuple{AbstractArray{T, 4} where T, PixelSelector}","page":"Home","title":"PixelFlipper.select","text":"select(x, selector)\n\nReturn matrix of CartesianIndices of x sorted by decreasing value. Requires x to be in WHCN format, as each column in the output corresponds to an inputs in the batch.\n\nExample\n\njulia> selector = PixelSelector()\nPixelSelector(:norm)\n\njulia> A = randn(1, 2, 2, 2)\n1×2×2×2 Array{Float64, 4}:\n[:, :, 1, 1] =\n -1.9275  -3.01383\n\n[:, :, 2, 1] =\n -0.424713  1.24167\n\n[:, :, 1, 2] =\n -1.36198  1.21235\n\n[:, :, 2, 2] =\n -1.75508  -0.700117\n\njulia> PixelFlipper.select(A, selector)\n2×4 Matrix{CartesianIndex{4}}:\n CartesianIndex(1, 2, 1, 1)  CartesianIndex(1, 2, 2, 1)  CartesianIndex(1, 1, 1, 2)  CartesianIndex(1, 1, 2, 2)\n CartesianIndex(1, 1, 1, 1)  CartesianIndex(1, 1, 2, 1)  CartesianIndex(1, 2, 1, 2)  CartesianIndex(1, 2, 2, 2)\n\n\n\n\n\n","category":"method"}]
}
